#region BSD License
/*
 * Use of this source code is governed by a BSD-style
 * license or other governing licenses that can be found in the LICENSE.md file or at
 * https://raw.githubusercontent.com/Krypton-Suite/Extended-Toolkit/master/LICENSE
 */
#endregion

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Krypton.Toolkit.Suite.Extended.Settings
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.5.0.0")]
    internal sealed partial class PaletteThemeSettings : global::System.Configuration.ApplicationSettingsBase
    {

        private static PaletteThemeSettings defaultInstance = ((PaletteThemeSettings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new PaletteThemeSettings())));

        public static PaletteThemeSettings Default
        {
            get
            {
                return defaultInstance;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string CustomThemeFilePath
        {
            get
            {
                return ((string)(this["CustomThemeFilePath"]));
            }
            set
            {
                this["CustomThemeFilePath"] = value;
            }
        }

        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("ProfessionalSystem")]
        public global::Krypton.Toolkit.PaletteModeManager CurrentTheme
        {
            get
            {
                return ((global::Krypton.Toolkit.PaletteModeManager)(this["CurrentTheme"]));
            }
            set
            {
                this["CurrentTheme"] = value;
            }
        }
    }
}
